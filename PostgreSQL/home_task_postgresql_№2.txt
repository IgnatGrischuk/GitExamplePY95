-- Проверяем существование таблиц перед их созданием
drop table if exists sales;
drop table if exists books;
drop table if exists authors;

-- Создаем таблицу авторов
create table authors(
    id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50)
);

-- Создаем таблицу книг
create table books (
    id INT PRIMARY KEY,
    title VARCHAR(255),
    author_id INT,
    publication_year INT,
    FOREIGN KEY (author_id) REFERENCES authors(id)
);

-- Создаем таблицу продаж
create table sales (
    id INT PRIMARY KEY,
    book_id INT,
    quantity INT,
    FOREIGN KEY (book_id) REFERENCES books(id)
);

-- Проверяем наличие записей перед вставкой данных
-- Вставляем данные об авторах
insert into authors (id, first_name, last_name)
values (1, 'Александр', 'П')
where not exists  (select 1 from authors where id = 1);

insert into authors (id, first_name, last_name)
values (2, 'Лев', 'Т')
where not exists (select 1 from authors where id = 2);

insert into authors (id, first_name, last_name)
values (3, 'Фёдор', 'Д')
where not exists (select 1 from authors where id = 3);

-- Вставляем данные о книгах
insert into books (id, title, author_id, publication_year)
values (1, 'Евгений Онегин', 1, 1833)
where not exists (select 1 from books where id = 1);

insert into books (id, title, author_id, publication_year)
values (2, 'Война и мир', 2, 1869)
where not exists (select 1 from books where id = 2);

insert into books (id, title, author_id, publication_year)
values (3, 'Преступление и наказание', 3, 1866)
where not exists  (select 1 from books where id = 3);

-- Вставляем данные о продажах
insert into sales (id, book_id, quantity)
values (1, 1, 100)
where not exists  (select 1 from sales where id = 1);

insert into sales (id, book_id, quantity)
values (2, 2, 75)
where not exists (select 1 from sales where id = 2);

insert into sales (id, book_id, quantity)
values (3, 3, 50)
where not exists (select 1 from sales where id = 3);

-- Добавляем ограничения целостности
alter table books
add constraint fk_author_id
FOREIGN KEY (author_id)
REFERENCES authors(id);

alter table sales
add constraint fk_book_id
FOREIGN KEY (book_id)
REFERENCES books(id);

select
    books.title,
    authors.first_name,
    authors.last_name
from
    books
INNER JOIN
    authors ON books.author_id = authors.id;

select
    authors.first_name,
    authors.last_name,
    COALESCE(books.title, 'Нет книги') AS title
from
    authors
LEFT JOIN
    books ON authors.id = books.author_id;

select
    books.title,
    authors.first_name,
    authors.last_name
from
    books
RIGHT JOIN
    authors ON books.author_id = authors.id;

select
    authors.first_name,
    authors.last_name,
    books.title,
    sales.quantity
from
    authors
INNER JOIN
    books ON authors.id = books.author_id
INNER JOIN
    sales ON books.id = sales.book_id;

select
    authors.first_name,
    authors.last_name,
    COALESCE(books.title, 'Нет книги') AS title,
    COALESCE(sales.quantity, 0) AS quantity
from
    authors
LEFT JOIN
    books ON authors.id = books.author_id
LEFT JOIN
    sales ON books.id = sales.book_id;

select
    authors.first_name,
    authors.last_name,
    SUM(sales.quantity) AS total_sales
from
    authors
INNER JOIN
    books ON authors.id = books.author_id
INNER JOIN
    sales ON books.id = sales.book_id
GROUP BY
    authors.id;

select
    authors.first_name,
    authors.last_name,
    COALESCE(SUM(sales.quantity), 0) AS total_sales
from
    authors
LEFT JOIN
    books ON authors.id = books.author_id
LEFT JOIN
    sales ON books.id = sales.book_id
GROUP BY
    authors.id;

select
    authors.first_name,
    authors.last_name
from
    authors
INNER JOIN (
    select
        books.author_id,
        SUM(sales.quantity) AS total_sales
    from
        books
    INNER JOIN
        sales ON books.id = sales.book_id
    GROUP BY
        books.author_id
    ORDER BY
        total_sales DESC
    LIMIT 1
) as author_sales on authors.id = author_sales.author_id;

select
    books.title,
    sales.quantity
from
    books
INNER JOIN
    sales ON books.id = sales.book_id
where
    sales.quantity > (
        select
            AVG(quantity)
        from
            sales
    );